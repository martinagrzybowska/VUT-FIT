-- Authors: xhandz00, xgrzyb00
-- IDS 2016/2017, SQL skript
-- Cech zlodejov

--------------------------------------
----------   DROP TABLES    ----------

DROP TABLE zlodej CASCADE CONSTRAINT;
DROP TABLE rajon CASCADE CONSTRAINT;
DROP TABLE vybavenie CASCADE CONSTRAINT;
DROP TABLE povolenie CASCADE CONSTRAINT;
DROP TABLE zlocin CASCADE CONSTRAINT;

DROP TABLE vyuzite_na CASCADE CONSTRAINT;
DROP TABLE pohybuje_sa_v CASCADE CONSTRAINT;
DROP TABLE vlastnil CASCADE CONSTRAINT;

DROP TABLE oblecenie CASCADE CONSTRAINT;
DROP TABLE zbran CASCADE CONSTRAINT;
DROP TABLE nastroj CASCADE CONSTRAINT;

DROP SEQUENCE povolenieSequence;

--------------------------------------
--------    CREATE TABLES    ---------

CREATE TABLE zlodej(
	rodne_cislo NUMBER PRIMARY KEY,
	meno VARCHAR(20),
	prezyvka VARCHAR(50) NOT NULL,
	datum_narodenia DATE NOT NULL,
	odmena_za_dolapenie NUMBER NOT NULL,
	stav VARCHAR(10) NOT NULL,
	specializacia VARCHAR(50) NOT NULL,

	CHECK (odmena_za_dolapenie >= 0)
);

CREATE TABLE rajon(
	ID_rajon NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	pocet_obyvatelov INTEGER NOT NULL,
	celkove_bohatstvo NUMBER NOT NULL,
	kapacita_zlodejov INTEGER NOT NULL,

	CHECK (pocet_obyvatelov >= 0),
	CHECK (kapacita_zlodejov >= 0)
);

CREATE TABLE zlocin(
	ID_zlocin NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	hodnota_koristi NUMBER NOT NULL,
	datum_prevedenia DATE NOT NULL,
	miera_obtiaznosti NUMBER(2,0) NOT NULL,
	detail_zlocinu VARCHAR(50),
	ID_rajon NUMBER NOT NULL, --FOREIGN
	
	CHECK (miera_obtiaznosti >= 0 AND miera_obtiaznosti <= 10)
);

CREATE TABLE povolenie(
	ID_povolenie NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	detail_povolenia VARCHAR(50),
	typ_zlocinu VARCHAR(50) NOT NULL,
	pomer_koristi NUMBER(3,2) NOT NULL,
	ID_zlocin NUMBER, --FOREIGN
	rodne_cislo NUMBER NOT NULL, --FOREIGN
	
	CHECK (pomer_koristi > 0 AND pomer_koristi <= 1)
);

CREATE TABLE vyuzite_na(
	ID_vybavenie NUMBER NOT NULL, --FOREIGN
	ID_zlocin NUMBER NOT NULL --FOREIGN
);

CREATE TABLE pohybuje_sa_v(
	ID_rajon NUMBER NOT NULL, --FOREIGN
	rodne_cislo NUMBER NOT NULL --FOREIGN
);

CREATE TABLE vlastnil(
	ID_vybavenie NUMBER NOT NULL, --FOREIGN
	rodne_cislo NUMBER NOT NULL, --FOREIGN
	od DATE NOT NULL,
	do DATE,

	CHECK (od <= do)
);

CREATE TABLE vybavenie(
	ID_vybavenie NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	detail_vybavenia VARCHAR(50),
	datum_vyroby DATE,
	cena_na_trhu NUMBER,
	material VARCHAR(50) NOT NULL
);

CREATE TABLE oblecenie(
	ID_vybavenie NUMBER PRIMARY KEY, 
	typ_oblecenia VARCHAR(50) NOT NULL,
	specialna_vlastnost VARCHAR(50) NOT NULL,
	miera_odolnosti NUMBER(2,0),
	farba VARCHAR(20),

	CHECK (miera_odolnosti >= 0 AND miera_odolnosti <= 10)
);

CREATE TABLE zbran(
	ID_vybavenie NUMBER PRIMARY KEY, 
	druh_zbrane VARCHAR(20) NOT NULL,
	nazov VARCHAR(20),
	miera_hrozby NUMBER(2,0) NOT NULL,
	hmotnost NUMBER,

	CHECK (miera_hrozby >= 0 AND miera_hrozby <= 10)
);

CREATE TABLE nastroj(
	ID_vybavenie NUMBER PRIMARY KEY,
	typ_nastroja VARCHAR(20) NOT NULL,
	vyuzitie VARCHAR(20) NOT NULL,
	velkost VARCHAR(20)
);

--------------------------------------
-----------    SET KEYS    -----------

-- COMPOSITE KEYS
ALTER TABLE vyuzite_na ADD CONSTRAINT pk_vyuzite_na PRIMARY KEY (ID_vybavenie, ID_zlocin);
ALTER TABLE pohybuje_sa_v ADD CONSTRAINT pk_pohybuje_sa_v PRIMARY KEY (ID_rajon, rodne_cislo);
ALTER TABLE vlastnil ADD CONSTRAINT pk_vlastnil PRIMARY KEY (ID_vybavenie, rodne_cislo);

--FOREIGN
ALTER TABLE zlocin ADD CONSTRAINT fk_ID_rajon FOREIGN KEY (ID_rajon) REFERENCES rajon(ID_rajon);
ALTER TABLE povolenie ADD CONSTRAINT fk_ID_zlocin FOREIGN KEY (ID_zlocin) REFERENCES zlocin(ID_zlocin);
ALTER TABLE povolenie ADD CONSTRAINT fk_rodne_cislo FOREIGN KEY (rodne_cislo) REFERENCES zlodej(rodne_cislo);
ALTER TABLE oblecenie ADD CONSTRAINT fk_ID_vybavenie_1 FOREIGN KEY (ID_vybavenie) REFERENCES vybavenie(ID_vybavenie);
ALTER TABLE zbran ADD CONSTRAINT fk_ID_vybavenie_2 FOREIGN KEY (ID_vybavenie) REFERENCES vybavenie(ID_vybavenie);
ALTER TABLE nastroj ADD CONSTRAINT fk_ID_vybavenie_3 FOREIGN KEY (ID_vybavenie) REFERENCES vybavenie(ID_vybavenie);


--------------------------------------
-----------    TRIGGERS    -----------

CREATE SEQUENCE povolenieSequence; --uchovava posledne id
-- ALTER session SET nls_date_format='dd.mm.yyyy';
CREATE OR REPLACE TRIGGER inkrementID
  BEFORE INSERT ON povolenie
  FOR EACH ROW
BEGIN
	IF: new.ID_povolenie is NULL then
		:new.ID_povolenie := povolenieSequence.nextval; --dame do idcka hodnotu z sequencie +1
	END IF;
END inkrementID;
/
show errors


CREATE OR REPLACE TRIGGER kontrolaRodnehoCisla
	BEFORE INSERT OR UPDATE OF rodne_cislo ON zlodej
	FOR EACH ROW
DECLARE
	rc zlodej.rodne_cislo%TYPE;
	rok VARCHAR(4);
	mesiac CHAR(2);
	den CHAR(2);
	koncovka VARCHAR(4);
	boolRC BOOLEAN;
	boolECP BOOLEAN;
BEGIN
	rc := :NEW.rodne_cislo;
	rok := SUBSTR(rc, 1, 2);
	mesiac := SUBSTR(rc, 3, 2);
	den := SUBSTR(rc, 5, 2);

	-- KONTROLA NA NUMERICKE ZNAKY
	---------------------------------------------------------
	IF (LENGTH(TRIM(TRANSLATE(rc, '0123456789', ' '))) != null) THEN
		Raise_Application_Error (-20203, 'Neplatne znaky v rodnom cisle!');
	END IF;

	-- KONCOVKA MA 4
	---------------------------------------------------------
	IF (LENGTH(rc) = 10) THEN
		koncovka := SUBSTR(rc, 7, 4);

		-- musi byt delitena 11
		IF ( MOD( rc, 11) != 0) THEN
			Raise_Application_Error (-20203, 'Rodne cislo nie je delitelne 11!');
		END IF;

		IF (rok > 53) THEN
            rok := rok + 1900;
        ELSE
            rok := rok + 2000;             
        END IF;

	-- KONCOVKA MA 3
	---------------------------------------------------------
	ELSIF (LENGTH(rc) = 9) THEN
		koncovka := SUBSTR(rc, 7, 3);

		IF (koncovka = 000) THEN
			Raise_Application_Error (-20203, 'Nespravny pocet znakov pre rodne cislo!');

        ELSIF (rok < 54) THEN
            rok := rok + 1900; 
        ELSE
            rok := rok + 1800; 
		END IF;

	-- POKIAL MA CISLO INY POCET ZNAKOV AKO 9 ALEBO 10
	---------------------------------------------------------
	ELSE
		Raise_Application_Error (-20203, 'Nespravny pocet znakov pre rodne cislo!');
	END IF;


	---------------------------------------------------------
	IF (mesiac > 50) THEN
		mesiac := mesiac - 50;
	END IF;
	
	IF (mesiac > 20) THEN
		boolRC := TRUE;
		mesiac := mesiac - 20;
	END IF;
	
	IF (den > 40) THEN
		boolECP := TRUE;
		den := den - 40;
	END IF;

	IF (boolRC = TRUE AND boolECP = TRUE) THEN
		Raise_Application_Error (-20203, 'Neplatne cislo ECP/RC!');
	END IF;

	---------------------------------------------------------
	IF (mesiac <= 0 AND mesiac > 12) THEN
		Raise_Application_Error (-20203, 'Mesiac mimo rozsah');
	END IF;
	
	IF (den <=0 AND den > 31) THEN
		Raise_Application_Error (-20203, 'Den mimo rozsah');
	END IF;
	IF ( (mesiac = 4 OR mesiac = 6 OR mesiac = 9 OR mesiac = 11) AND den > 30) THEN
		Raise_Application_Error (-20203, 'Den mimo rozsah');
	ELSIF ( mesiac = 2 ) THEN
		IF (den > 29) THEN
			Raise_Application_Error (-20203, 'Den mimo rozsah');
		ELSIF (den = 29) THEN
			IF (MOD(rok,4) != 0) THEN
				IF (MOD(rok,400) != 0) THEN
					Raise_Application_Error (-20203, 'rok ' || rok ||' nebol priestupny!');
				END IF;	
			ELSIF (((MOD(rok, 4) = 0) OR (MOD(rok, 400) = 0)) AND (MOD(rok,100) = 0)) THEN 
				Raise_Application_Error (-20203, 'rok ' || rok ||' nebol priestupny!');
			END IF;
		END IF;
	END IF;

END kontrolaRodnehoCisla;
/
show errors


---------------------------------------
-----------   PROCEDURES   ------------
-- procedura, ktora po zadani id rajonu vypocita a vypise pomer zlodejov na obyvatelov daneho rajonu a vsetkych zlodejov v nom cinnych
SET serveroutput ON;
CREATE OR REPLACE PROCEDURE pomerZlodejov(idRajon IN NUMBER)
IS
	cursor zlodeji IS SELECT rodne_cislo, meno FROM (SELECT rodne_cislo FROM pohybuje_sa_v WHERE ID_rajon = idRajon) NATURAL JOIN zlodej;
	zlodejVrajone zlodeji%ROWTYPE;
	pocetZlodejov NUMBER;
	pocetObyvatelov NUMBER;

BEGIN
	pocetZlodejov := 0;
	open zlodeji;
	loop
		fetch zlodeji into zlodejVrajone;
		exit WHEN zlodeji%NOTFOUND; -- pokial dany rajon neexistuje
		IF (pocetZlodejov = 0) THEN 
			dbms_output.put_line('Zoznam zlodejov v rajone ' || idRajon || ':');
		END IF;
		pocetZlodejov := pocetZlodejov + 1;
		dbms_output.put('Rodne cislo zlodeja: ' || zlodejVrajone.rodne_cislo || ', ');
		IF (zlodejVrajone.meno IS NULL) THEN -- pokial je zlodej bezmenny
			dbms_output.put_line('Meno zlodeja: nezadane');
		ELSE
			dbms_output.put_line('Meno zlodeja: ' || zlodejVrajone.meno );
		END IF;
	end loop;

	SELECT pocet_obyvatelov INTO pocetObyvatelov FROM rajon WHERE ID_rajon = idRajon;

	dbms_output.put_line('Jeden zlodej pripada na ' || ROUND(pocetObyvatelov/pocetZlodejov) || ' obyvatelov');
	
EXCEPTION
	WHEN NO_DATA_FOUND THEN 
	    dbms_output.put_line('Zadany rajon neexistuje');
	WHEN ZERO_DIVIDE THEN 
    	dbms_output.put_line('V rajone ' || idRajon || ' nie je cinny ziaden zlodej');
	WHEN OTHERS THEN
		Raise_Application_Error (-20203, 'Chyba v procedure pomerZlodejov()!');
END;
/

---------------------------------------

SET serveroutput ON;
CREATE OR REPLACE PROCEDURE rozdelenieLupuZlocinu(idZlocin IN NUMBER)
IS
	cursor zlodeji IS SELECT * FROM
	(SELECT rodne_cislo, pomer_koristi, hodnota_koristi FROM
	(SELECT ID_zlocin, rodne_cislo, pomer_koristi FROM povolenie WHERE ID_zlocin = idZlocin) NATURAL JOIN zlocin)
	NATURAL JOIN zlodej;
	zlodejZlocinu zlodeji%ROWTYPE;

BEGIN
	open zlodeji;
	loop
		fetch zlodeji into zlodejZlocinu;
		IF (zlodeji%ROWCOUNT = 0) THEN
			RAISE NO_DATA_FOUND;
		END IF;
		exit WHEN zlodeji%NOTFOUND;
		IF (zlodejZlocinu.meno IS NULL) THEN
			IF (zlodejZlocinu.prezyvka IS NULL) THEN
				dbms_output.put('Zlodej s rodnym cislom: ' || zlodejZlocinu.rodne_cislo || ' ');
			ELSE
				dbms_output.put('Zlodej s prezyvkou: ' || zlodejZlocinu.prezyvka || ' ');
			END IF;
		ELSE
			dbms_output.put('Zlodej: ' || zlodejZlocinu.meno || ' ');
		END IF;

		dbms_output.put_line('si odniesol ' || zlodejZlocinu.hodnota_koristi * zlodejZlocinu.pomer_koristi );

	end loop;

	dbms_output.put_line('Celkova hodnota lupu: ' || zlodejZlocinu.hodnota_koristi);

EXCEPTION
	WHEN NO_DATA_FOUND THEN 
	    dbms_output.put_line('Zadany zlocin neexistuje');
	WHEN OTHERS THEN
		Raise_Application_Error (-20203, 'Chyba v procedure rozdelenieLupuZlocinu()!');
END;
/


--------------------------------------
---------    FILL TABLES    ----------

----- ZLODEJ /rod.c, meno, prezyvka, narodenie, odmena, stav, spec
INSERT INTO zlodej VALUES('6112247735','Juraj Janosik', 'Durko', '01.01.1961', '900', 'zivy', 'pocestny lupic');
INSERT INTO zlodej VALUES('7403099869','Daniel Danko', 'Kapitan Danko', '09.03.1974', '999999', 'zivy', 'politik s hlbokym vreckom');
INSERT INTO zlodej VALUES('7501027633','James Moriarty', 'Consulting criminal', '02.01.1975', '90000', 'zivy', 'terorista');
INSERT INTO zlodej VALUES('6503079572','Robin Hood', 'Robinko', '07.03.1965', '60000', 'mrtvy', 'kradne od bohatych');
INSERT INTO zlodej VALUES('5612310011','Tom Marvolo Riddle', 'Lord Voldemort', '31.12.1956', '999000', 'zivy', 'pan zla');
INSERT INTO zlodej VALUES('9262247709', NULL, 'Vesela Krava', '24.12.1992', '31', 'zivy', 'kradne dobytok a hydinu');

----- RAJON /id, pocet ob, bohatstvo, kapacit
INSERT INTO rajon VALUES('000', '800', '10000', '10'); 
INSERT INTO rajon VALUES('001', '900', '20000', '20');
INSERT INTO rajon VALUES('002', '9000', '50000', '100');
INSERT INTO rajon VALUES('003', '2000', '42600', '30');
INSERT INTO rajon VALUES('004', '50000', '586000', '200');
INSERT INTO rajon VALUES('005', '500', '8700', '5');

----- VYBAVENIE /id, detail, datum, cena, material
----- NASTROJ typ, vyuzitie, velkost
INSERT INTO vybavenie VALUES('100', 'krasny', NULL, NULL, 'raketove palivo');
INSERT INTO nastroj VALUES('100', 'vybusnina', 'pohon', NULL);

----- ZBRAN / id, druh, nazov, miera, hmotnost
INSERT INTO vybavenie VALUES('101', NULL, '20.4.2012', '8000', 'zelezo');
INSERT INTO zbran VALUES('101', 'sekerka', 'krkolam', '1', NULL);
INSERT INTO vybavenie VALUES('103', 'nefunkcna', '13.6.1962', '9999', 'kov');
INSERT INTO zbran VALUES('103', 'AK-47', 'Kalasnikov', '9', '4,5');

------ OBLECENIE / typ, specialita, odolnost, darba
INSERT INTO vybavenie VALUES('102', NULL, NULL, '9000', 'koza');
INSERT INTO oblecenie VALUES('102', 'spodna bielizen', 'nepriestrelna', '7', 'ruzova');

------ VLASTNIL / id vybavenie, rodne cislo, od, do
INSERT INTO vlastnil VALUES('100', '6112247735', '20.4.1998', '20.5.1998');
INSERT INTO vlastnil VALUES('101', '6112247735', '20.5.1999', NULL);
INSERT INTO vlastnil VALUES('102', '7403099869', '20.6.1997', NULL);
INSERT INTO vlastnil VALUES('101', '6503079572', '20.3.1991', '19.5.1999');
INSERT INTO vlastnil VALUES('103', '5612310011', '6.4.1982', '8.7.1985');
INSERT INTO vlastnil VALUES('103', '9262247709', '1.1.1993', NULL);

------ POHYBUJE SA V / id rajon, rodne cislo
INSERT INTO pohybuje_sa_v VALUES('000', '6112247735');
INSERT INTO pohybuje_sa_v VALUES('001', '7403099869');
INSERT INTO pohybuje_sa_v VALUES('000', '7501027633');
INSERT INTO pohybuje_sa_v VALUES('002', '7403099869');
INSERT INTO pohybuje_sa_v VALUES('002', '7501027633');
INSERT INTO pohybuje_sa_v VALUES('001', '9262247709');
INSERT INTO pohybuje_sa_v VALUES('000', '9262247709');

------ ZLOCIN / id, hodnota, datum, obtiaznost, detail, id rajon 
INSERT INTO zlocin VALUES('1', '120000', '31.12.2016','5', 'vydaril sa', '000');
INSERT INTO zlocin VALUES('2', '25', '31.12.2016','1', NULL, '000');
INSERT INTO zlocin VALUES('3', '420000', '14.04.2013','8', 'az do dna', '002');

------ POVOLENIE / id, detail, typ zlocinu, pomer, id zlocin, rodne cislo
INSERT INTO povolenie (detail_povolenia, typ_zlocinu, pomer_koristi, ID_zlocin, rodne_cislo) VALUES ('auto', 'kradez', '0,3', '1', '6112247735');
INSERT INTO povolenie (detail_povolenia, typ_zlocinu, pomer_koristi, ID_zlocin, rodne_cislo) VALUES ('lizatko', 'kradez', '1', '2', '7403099869');
INSERT INTO povolenie (detail_povolenia, typ_zlocinu, pomer_koristi, ID_zlocin, rodne_cislo) VALUES ('obchod', 'prepadnutie', '0,2', '3', '7501027633');
INSERT INTO povolenie (detail_povolenia, typ_zlocinu, pomer_koristi, ID_zlocin, rodne_cislo) VALUES ('obchod', 'prepadnutie', '0,7', '3', '7403099869');
INSERT INTO povolenie (detail_povolenia, typ_zlocinu, pomer_koristi, ID_zlocin, rodne_cislo) VALUES ('obchod', 'prepadnutie', '0,1', '3', '9262247709');
INSERT INTO povolenie (detail_povolenia, typ_zlocinu, pomer_koristi, ID_zlocin, rodne_cislo) VALUES ('stajna', 'lupez', '1', NULL, '9262247709');

------ VYUZITE NA / id vybavnie, id zlocin
INSERT INTO vyuzite_na VALUES('102', '1');
INSERT INTO vyuzite_na VALUES('101', '2');
INSERT INTO vyuzite_na VALUES('103', '3');


--------------------------------------
-----------    SELECTS    ------------

-- Select cez 3 tabulky - vypise pre kazdeho zlodeja vsetky zlociny, na ktorych sa podielal
SELECT zlodej.meno, zlodej.prezyvka, zlocin.ID_zlocin FROM zlodej INNER JOIN povolenie on zlodej.rodne_cislo = povolenie.rodne_cislo INNER JOIN zlocin on povolenie.ID_zlocin = zlocin.ID_zlocin;

-- Select cez 2 tabulky - vypise pre kazdy rajon vsetky zlociny, ktore v nom boli spachane, spolu s datumom ich prevedenia
SELECT rajon.ID_rajon, zlocin.ID_zlocin, zlocin.datum_prevedenia FROM rajon INNER JOIN zlocin on rajon.ID_rajon = zlocin.ID_rajon;

-- Select cez 2 taublky - vypise pre kazde povolenie zlocin, na ktory bolo vyzite
SELECT povolenie.ID_povolenie, zlocin.ID_zlocin FROM povolenie INNER JOIN zlocin on povolenie.ID_zlocin = zlocin.ID_zlocin;

-- GROUP BY s agregacnou funkciou - vypise pre kazdy datum pocet zlocinov, ktore sa v nom stali
SELECT datum_prevedenia, COUNT(*) pocet_zlocinov FROM zlocin GROUP BY datum_prevedenia;

-- GROUP BY s agregacnou funkciou - vypise pre kazdy rajon sucet korisi vsetkych zlocinov, ktore sa v nom odohrali
SELECT ID_rajon, SUM(hodnota_koristi) celkova_hodnota FROM zlocin GROUP BY ID_rajon; 

-- GROUP BY s agregacnou funkciou - vypise pre kazde vybavenie pocet zlodejov, ktori ho vlastnili
SELECT ID_vybavenie, COUNT(*) pocet_zlodejov FROM vlastnil GROUP BY ID_vybavenie;

-- dotaz obsahujuci predikat EXISTS - vypise zlodejov, ktori sa nepohybuju v ziadnom rajone (mozne ked su mrtvi, napr)
SELECT Z.rodne_cislo, Z.prezyvka FROM zlodej Z WHERE NOT EXISTS ( 
	SELECT P.rodne_cislo FROM pohybuje_sa_v P WHERE P.rodne_cislo = Z.rodne_cislo
);
-- dotaz s predikatom IN s vnorenym selectom - vypise zoznam povoleni, ktore boli vyuzite na zlocin, ktoreho korist bola vacsia ako 1000
SELECT * FROM povolenie P WHERE P.ID_zlocin IN ( 
	SELECT Z.ID_zlocin FROM zlocin Z WHERE Z.hodnota_koristi > 1000
);


--------------------------------
-----------  RIGHTS  -----------

GRANT ALL ON zlodej TO xgrzyb00;
GRANT ALL ON rajon TO xgrzyb00;
GRANT ALL ON vybavenie TO xgrzyb00;
GRANT ALL ON povolenie TO xgrzyb00;
GRANT ALL ON zlocin TO xgrzyb00;
GRANT ALL ON vyuzite_na TO xgrzyb00;
GRANT ALL ON pohybuje_sa_v TO xgrzyb00;
GRANT ALL ON vlastnil TO xgrzyb00;
GRANT ALL ON oblecenie TO xgrzyb00;
GRANT ALL ON zbran TO xgrzyb00;
GRANT ALL ON nastroj TO xgrzyb00;

GRANT EXECUTE ON pomerZlodejov TO xgrzyb00;
GRANT EXECUTE ON rozdelenieLupuZlocinu TO xgrzyb00;


--------------------------------------
--------- MATERIALIZED VIEW ----------
alter session set query_rewrite_enabled = true;
DROP MATERIALIZED VIEW velkyRajon;

CREATE MATERIALIZED VIEW LOG ON rajon WITH PRIMARY KEY, ROWID(pocet_obyvatelov) INCLUDING NEW VALUES;

CREATE MATERIALIZED VIEW velkyRajon

CACHE 
BUILD IMMEDIATE 
REFRESH FAST ON COMMIT 
ENABLE QUERY REWRITE 

AS SELECT r.ID_rajon, r.pocet_obyvatelov FROM rajon r WHERE r.pocet_obyvatelov > 1000 AND r.kapacita_zlodejov > 5;

GRANT ALL ON velkyRajon TO xgrzyb00;

SELECT * FROM velkyRajon;
INSERT INTO rajon VALUES('006', '9999', '9999', '99');
COMMIT;
SELECT * FROM velkyRajon;


--------------------------------------
---------- PROCEDURES EXEC -----------

exec pomerZlodejov('0');
exec rozdelenieLupuZlocinu('3');


--------------------------------------
------------- EXPLAIN PLAN -----------
--DROP INDEX index1;

EXPLAIN PLAN FOR 
SELECT ID_rajon, typ_zlocinu, COUNT(*) pocet 
FROM povolenie NATURAL JOIN zlocin NATURAL JOIN rajon 
WHERE pocet_obyvatelov > 1000 
GROUP BY typ_zlocinu, ID_rajon;

SELECT * FROM TABLE(DBMS_XPLAN.display());

CREATE INDEX index1 ON povolenie(typ_zlocinu, ID_zlocin);

EXPLAIN PLAN FOR
SELECT /*+ INDEX(povolenie index1)*/ ID_rajon, typ_zlocinu, COUNT(*) pocet 
FROM povolenie NATURAL JOIN zlocin NATURAL JOIN rajon 
WHERE pocet_obyvatelov > 1000 
GROUP BY typ_zlocinu, ID_rajon;

SELECT * FROM TABLE(DBMS_XPLAN.display());
